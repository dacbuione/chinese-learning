import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  SafeAreaView,
  Dimensions,
  Alert,
} from 'react-native';
import { useLocalSearchParams, useRouter } from 'expo-router';
import { colors, getResponsiveSpacing, getResponsiveFontSize, Layout } from '../../../src/theme';
import { useVocabularyTTS } from '../../../src/hooks/useTTS';

const { width } = Dimensions.get('window');

interface VocabularyItem {
  id: string;
  hanzi: string;
  pinyin: string;
  english: string;
  vietnamese: string;
  tone: number;
  audio?: string;
}

interface GrammarPoint {
  id: string;
  title: string;
  explanation: string;
  example: string;
  translation: string;
}

interface LessonData {
  id: string;
  title: string;
  description: string;
  level: string;
  progress: number;
  vocabulary: VocabularyItem[];
  grammar: GrammarPoint[];
  totalItems: number;
  completedItems: number;
}

const lessonData: Record<string, LessonData> = {
  'chao-hoi': {
    id: 'chao-hoi',
    title: 'Ch√†o h·ªèi c∆° b·∫£n',
    description: 'H·ªçc c√°ch ch√†o h·ªèi v√† gi·ªõi thi·ªáu b·∫£n th√¢n b·∫±ng ti·∫øng Trung',
    level: 'HSK 1',
    progress: 100,
    totalItems: 8,
    completedItems: 8,
    vocabulary: [
      { id: 'ni-hao', hanzi: '‰Ω†Â•Ω', pinyin: 'n«ê h«éo', english: 'hello', vietnamese: 'xin ch√†o', tone: 3 },
      { id: 'zai-jian', hanzi: 'ÂÜçËßÅ', pinyin: 'z√†i ji√†n', english: 'goodbye', vietnamese: 't·∫°m bi·ªát', tone: 4 },
      { id: 'xie-xie', hanzi: 'Ë∞¢Ë∞¢', pinyin: 'xi√® xi√®', english: 'thank you', vietnamese: 'c·∫£m ∆°n', tone: 4 },
      { id: 'bu-ke-qi', hanzi: '‰∏çÂÆ¢Ê∞î', pinyin: 'b√π k√® q√¨', english: 'you\'re welcome', vietnamese: 'kh√¥ng c√≥ g√¨', tone: 4 },
    ],
    grammar: [
      {
        id: '1',
        title: 'C·∫•u tr√∫c ch√†o h·ªèi c∆° b·∫£n',
        explanation: 'S·ª≠ d·ª•ng ‰Ω†Â•Ω (n«ê h«éo) ƒë·ªÉ ch√†o h·ªèi trong m·ªçi t√¨nh hu·ªëng',
        example: '‰Ω†Â•ΩÔºÅÊàëÊòØÊùéÊòé„ÄÇ',
        translation: 'Xin ch√†o! T√¥i l√† L√Ω Minh.'
      },
      {
        id: '2', 
        title: 'C√°ch c·∫£m ∆°n v√† ƒë√°p l·∫°i',
        explanation: 'D√πng Ë∞¢Ë∞¢ ƒë·ªÉ c·∫£m ∆°n v√† ‰∏çÂÆ¢Ê∞î ƒë·ªÉ ƒë√°p l·∫°i',
        example: 'A: Ë∞¢Ë∞¢ÔºÅ B: ‰∏çÂÆ¢Ê∞îÔºÅ',
        translation: 'A: C·∫£m ∆°n! B: Kh√¥ng c√≥ g√¨!'
      }
    ]
  },
  'so-dem': {
    id: 'so-dem',
    title: 'S·ªë ƒë·∫øm 1-10',
    description: 'H·ªçc c√°ch ƒë·∫øm s·ªë t·ª´ 1 ƒë·∫øn 10 b·∫±ng ti·∫øng Trung',
    level: 'HSK 1',
    progress: 75,
    totalItems: 10,
    completedItems: 7,
    vocabulary: [
      { id: '1', hanzi: '‰∏Ä', pinyin: 'yƒ´', english: 'one', vietnamese: 'm·ªôt', tone: 1 },
      { id: '2', hanzi: '‰∫å', pinyin: '√®r', english: 'two', vietnamese: 'hai', tone: 4 },
      { id: '3', hanzi: '‰∏â', pinyin: 'sƒÅn', english: 'three', vietnamese: 'ba', tone: 1 },
      { id: '4', hanzi: 'Âõõ', pinyin: 's√¨', english: 'four', vietnamese: 'b·ªën', tone: 4 },
      { id: '5', hanzi: '‰∫î', pinyin: 'w«î', english: 'five', vietnamese: 'nƒÉm', tone: 3 },
    ],
    grammar: [
      {
        id: '1',
        title: 'C√°ch ƒë·∫øm s·ªë c∆° b·∫£n',
        explanation: 'S·ªë ƒë·∫øm trong ti·∫øng Trung c√≥ quy t·∫Øc ƒë∆°n gi·∫£n t·ª´ 1-10',
        example: '‰∏Ä„ÄÅ‰∫å„ÄÅ‰∏â„ÄÅÂõõ„ÄÅ‰∫î',
        translation: 'M·ªôt, hai, ba, b·ªën, nƒÉm'
      }
    ]
  }
};

export default function LessonDetail() {
  const { id } = useLocalSearchParams<{ id: string }>();
  const router = useRouter();
  const [activeTab, setActiveTab] = useState<'vocabulary' | 'grammar' | 'practice'>('vocabulary');
  const [selectedVocab, setSelectedVocab] = useState<string | null>(null);

  // TTS Hook
  const {
    isLoading: isTTSLoading,
    isPlaying: isTTSPlaying,
    speakVocabulary,
    stop: stopTTS,
  } = useVocabularyTTS();

  const lesson = id ? lessonData[id] : null;

  if (!lesson) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.errorContainer}>
          <Text style={styles.errorText}>Kh√¥ng t√¨m th·∫•y b√†i h·ªçc</Text>
          <TouchableOpacity style={styles.backButton} onPress={() => router.back()}>
            <Text style={styles.backButtonText}>Quay l·∫°i</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  }

  const getToneColor = (tone: number) => {
    const toneColors = {
      1: colors.error[500],    // Thanh ngang - ƒë·ªè
      2: colors.warning[500],  // Thanh s·∫Øc - v√†ng
      3: colors.accent[500],   // Thanh huy·ªÅn - xanh l√°
      4: colors.primary[500],  // Thanh n·∫∑ng - xanh d∆∞∆°ng
    };
    return toneColors[tone as keyof typeof toneColors] || colors.neutral[500];
  };

  const handleVocabAudio = async (item: VocabularyItem) => {
    try {
      if (isTTSPlaying) {
        await stopTTS();
      } else {
        await speakVocabulary({
          simplified: item.hanzi,
          pinyin: item.pinyin,
          tone: item.tone,
        });
      }
    } catch (error) {
      console.error('Vocabulary TTS Error:', error);
      Alert.alert('L·ªói ph√°t √¢m', 'Kh√¥ng th·ªÉ ph√°t √¢m t·ª´ v·ª±ng. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  const renderVocabularyTab = () => (
    <View style={styles.tabContent}>
      <Text style={styles.sectionTitle}>T·ª´ v·ª±ng ({lesson.vocabulary.length} t·ª´)</Text>
      {lesson.vocabulary.map((item) => (
        <TouchableOpacity
          key={item.id}
          style={[
            styles.vocabularyCard,
            selectedVocab === item.id && styles.selectedCard
          ]}
          onPress={() => {
            // Navigate to vocabulary detail screen
            router.push(`/vocabulary/${item.id}`);
          }}
        >
          <View style={styles.vocabularyHeader}>
            <View style={styles.toneRow}>
              <View style={[styles.toneIndicator, { backgroundColor: getToneColor(item.tone) }]} />
              <Text style={styles.toneText}>Thanh {item.tone}</Text>
            </View>
            <TouchableOpacity style={styles.audioButton} onPress={() => handleVocabAudio(item)}>
              <Text style={styles.audioButtonText}>üîä</Text>
            </TouchableOpacity>
          </View>
          
          <Text style={styles.hanzi}>{item.hanzi}</Text>
          <Text style={styles.pinyin}>{item.pinyin}</Text>
          
          <View style={styles.translations}>
            <Text style={styles.english}>{item.english}</Text>
            <Text style={styles.vietnamese}>{item.vietnamese}</Text>
          </View>

          {selectedVocab === item.id && (
            <View style={styles.expandedContent}>
              <View style={styles.actionButtons}>
                <TouchableOpacity style={styles.actionButton}>
                  <Text style={styles.actionButtonText}>Luy·ªán t·∫≠p</Text>
                </TouchableOpacity>
                <TouchableOpacity style={styles.actionButton}>
                  <Text style={styles.actionButtonText}>Th√™m v√†o y√™u th√≠ch</Text>
                </TouchableOpacity>
              </View>
            </View>
          )}
        </TouchableOpacity>
      ))}
    </View>
  );

  const renderGrammarTab = () => (
    <View style={styles.tabContent}>
      <Text style={styles.sectionTitle}>Ng·ªØ ph√°p ({lesson.grammar.length} ƒëi·ªÉm)</Text>
      {lesson.grammar.map((item) => (
        <View key={item.id} style={styles.grammarCard}>
          <Text style={styles.grammarTitle}>{item.title}</Text>
          <Text style={styles.grammarExplanation}>{item.explanation}</Text>
          
          <View style={styles.exampleContainer}>
            <Text style={styles.exampleLabel}>V√≠ d·ª•:</Text>
            <Text style={styles.exampleChinese}>{item.example}</Text>
            <Text style={styles.exampleTranslation}>{item.translation}</Text>
          </View>
        </View>
      ))}
    </View>
  );

  const renderPracticeTab = () => (
    <View style={styles.tabContent}>
      <Text style={styles.sectionTitle}>Luy·ªán t·∫≠p</Text>
      
      <TouchableOpacity 
        style={styles.practiceCard}
        onPress={() => router.push(`/practice/vocabulary?lesson=${lesson.id}`)}
      >
        <Text style={styles.practiceTitle}>üéØ Luy·ªán t·ª´ v·ª±ng</Text>
        <Text style={styles.practiceDescription}>√în t·∫≠p {lesson.vocabulary.length} t·ª´ v·ª±ng trong b√†i</Text>
        <Text style={styles.practiceTime}>‚è±Ô∏è 5-10 ph√∫t</Text>
      </TouchableOpacity>

      <TouchableOpacity 
        style={styles.practiceCard}
        onPress={() => router.push(`/practice/pronunciation?lesson=${lesson.id}`)}
      >
        <Text style={styles.practiceTitle}>üó£Ô∏è Luy·ªán ph√°t √¢m</Text>
        <Text style={styles.practiceDescription}>Th·ª±c h√†nh ph√°t √¢m c√°c t·ª´ trong b√†i</Text>
        <Text style={styles.practiceTime}>‚è±Ô∏è 10-15 ph√∫t</Text>
      </TouchableOpacity>

             <TouchableOpacity 
         style={styles.practiceCard}
         onPress={() => router.push(`/(tabs)/practice/quiz?lesson=${lesson.id}`)}
       >
         <Text style={styles.practiceTitle}>üìù Ki·ªÉm tra</Text>
         <Text style={styles.practiceDescription}>Ki·ªÉm tra hi·ªÉu bi·∫øt v·ªÅ b√†i h·ªçc</Text>
         <Text style={styles.practiceTime}>‚è±Ô∏è 5 ph√∫t</Text>
       </TouchableOpacity>
    </View>
  );

  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity style={styles.backButton} onPress={() => router.push('/lessons')}>
          <Text style={styles.backButtonText}>‚Üê Quay l·∫°i</Text>
        </TouchableOpacity>
        <View style={styles.headerInfo}>
          <Text style={styles.lessonTitle}>{lesson.title}</Text>
          <Text style={styles.lessonLevel}>{lesson.level}</Text>
        </View>
      </View>

      {/* Progress */}
      <View style={styles.progressContainer}>
        <View style={styles.progressInfo}>
          <Text style={styles.progressText}>
            Ti·∫øn ƒë·ªô: {lesson.completedItems}/{lesson.totalItems} ({lesson.progress}%)
          </Text>
        </View>
        <View style={styles.progressBar}>
          <View style={[styles.progressFill, { width: `${lesson.progress}%` }]} />
        </View>
      </View>

      {/* Tabs */}
      <View style={styles.tabContainer}>
        <TouchableOpacity
          style={[styles.tab, activeTab === 'vocabulary' && styles.activeTab]}
          onPress={() => setActiveTab('vocabulary')}
        >
          <Text style={[styles.tabText, activeTab === 'vocabulary' && styles.activeTabText]}>
            T·ª´ v·ª±ng
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.tab, activeTab === 'grammar' && styles.activeTab]}
          onPress={() => setActiveTab('grammar')}
        >
          <Text style={[styles.tabText, activeTab === 'grammar' && styles.activeTabText]}>
            Ng·ªØ ph√°p
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.tab, activeTab === 'practice' && styles.activeTab]}
          onPress={() => setActiveTab('practice')}
        >
          <Text style={[styles.tabText, activeTab === 'practice' && styles.activeTabText]}>
            Luy·ªán t·∫≠p
          </Text>
        </TouchableOpacity>
      </View>

      {/* Content */}
      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {activeTab === 'vocabulary' && renderVocabularyTab()}
        {activeTab === 'grammar' && renderGrammarTab()}
        {activeTab === 'practice' && renderPracticeTab()}
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.neutral[50],
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: getResponsiveSpacing('lg'),
    backgroundColor: colors.neutral[50],
    borderBottomWidth: 1,
    borderBottomColor: colors.neutral[200],
  },
  backButton: {
    marginRight: getResponsiveSpacing('md'),
  },
  backButtonText: {
    fontSize: getResponsiveFontSize('base'),
    color: colors.primary[600],
    fontWeight: '500',
  },
  headerInfo: {
    flex: 1,
  },
  lessonTitle: {
    fontSize: getResponsiveFontSize('xl'),
    fontWeight: '600',
    color: colors.neutral[900],
  },
  lessonLevel: {
    fontSize: getResponsiveFontSize('sm'),
    color: colors.neutral[600],
    marginTop: 2,
  },
  progressContainer: {
    padding: getResponsiveSpacing('lg'),
    backgroundColor: colors.neutral[50],
  },
  progressInfo: {
    marginBottom: getResponsiveSpacing('sm'),
  },
  progressText: {
    fontSize: getResponsiveFontSize('sm'),
    color: colors.neutral[700],
  },
  progressBar: {
    height: 8,
    backgroundColor: colors.neutral[200],
    borderRadius: 4,
    overflow: 'hidden',
  },
  progressFill: {
    height: '100%',
         backgroundColor: colors.accent[500],
    borderRadius: 4,
  },
  tabContainer: {
    flexDirection: 'row',
    backgroundColor: colors.neutral[100],
    marginHorizontal: getResponsiveSpacing('lg'),
    borderRadius: 8,
    padding: 4,
  },
  tab: {
    flex: 1,
    paddingVertical: getResponsiveSpacing('sm'),
    alignItems: 'center',
    borderRadius: 6,
  },
  activeTab: {
    backgroundColor: colors.neutral[50],
  },
  tabText: {
    fontSize: getResponsiveFontSize('sm'),
    color: colors.neutral[600],
    fontWeight: '500',
  },
  activeTabText: {
    color: colors.primary[600],
  },
  content: {
    flex: 1,
    padding: getResponsiveSpacing('lg'),
  },
  tabContent: {
    paddingBottom: getResponsiveSpacing('xl'),
  },
  sectionTitle: {
    fontSize: getResponsiveFontSize('lg'),
    fontWeight: '600',
    color: colors.neutral[900],
    marginBottom: getResponsiveSpacing('lg'),
  },
  vocabularyCard: {
    backgroundColor: colors.neutral[50],
    borderRadius: 12,
    padding: getResponsiveSpacing('lg'),
    marginBottom: getResponsiveSpacing('md'),
    borderWidth: 1,
    borderColor: colors.neutral[200],
  },
  selectedCard: {
    borderColor: colors.primary[500],
    backgroundColor: colors.primary[50],
  },
  vocabularyHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: getResponsiveSpacing('sm'),
  },
  toneRow: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  toneIndicator: {
    width: 8,
    height: 8,
    borderRadius: 4,
    marginRight: getResponsiveSpacing('xs'),
  },
  toneText: {
    fontSize: getResponsiveFontSize('xs'),
    color: colors.neutral[600],
  },
  audioButton: {
    padding: getResponsiveSpacing('xs'),
  },
  audioButtonText: {
    fontSize: getResponsiveFontSize('lg'),
  },
  hanzi: {
    fontSize: getResponsiveFontSize('4xl'),
    fontFamily: 'System',
    color: colors.neutral[900],
    textAlign: 'center',
    marginBottom: getResponsiveSpacing('sm'),
  },
  pinyin: {
    fontSize: getResponsiveFontSize('lg'),
    color: colors.primary[600],
    textAlign: 'center',
    marginBottom: getResponsiveSpacing('md'),
    fontStyle: 'italic',
  },
  translations: {
    gap: getResponsiveSpacing('xs'),
  },
  english: {
    fontSize: getResponsiveFontSize('base'),
    color: colors.neutral[700],
    textAlign: 'center',
  },
  vietnamese: {
    fontSize: getResponsiveFontSize('base'),
    color: colors.neutral[600],
    textAlign: 'center',
    fontWeight: '500',
  },
  expandedContent: {
    marginTop: getResponsiveSpacing('md'),
    paddingTop: getResponsiveSpacing('md'),
    borderTopWidth: 1,
    borderTopColor: colors.neutral[200],
  },
  actionButtons: {
    flexDirection: 'row',
    gap: getResponsiveSpacing('sm'),
  },
  actionButton: {
    flex: 1,
    backgroundColor: colors.primary[500],
    paddingVertical: getResponsiveSpacing('sm'),
    borderRadius: 8,
    alignItems: 'center',
  },
  actionButtonText: {
    fontSize: getResponsiveFontSize('sm'),
    color: colors.neutral[50],
    fontWeight: '500',
  },
  grammarCard: {
    backgroundColor: colors.neutral[50],
    borderRadius: 12,
    padding: getResponsiveSpacing('lg'),
    marginBottom: getResponsiveSpacing('md'),
    borderWidth: 1,
    borderColor: colors.neutral[200],
  },
  grammarTitle: {
    fontSize: getResponsiveFontSize('lg'),
    fontWeight: '600',
    color: colors.neutral[900],
    marginBottom: getResponsiveSpacing('sm'),
  },
  grammarExplanation: {
    fontSize: getResponsiveFontSize('base'),
    color: colors.neutral[700],
    lineHeight: 24,
    marginBottom: getResponsiveSpacing('md'),
  },
  exampleContainer: {
    backgroundColor: colors.neutral[100],
    borderRadius: 8,
    padding: getResponsiveSpacing('md'),
  },
  exampleLabel: {
    fontSize: getResponsiveFontSize('sm'),
    color: colors.neutral[600],
    fontWeight: '500',
    marginBottom: getResponsiveSpacing('xs'),
  },
  exampleChinese: {
    fontSize: getResponsiveFontSize('lg'),
    color: colors.neutral[900],
    fontFamily: 'System',
    marginBottom: getResponsiveSpacing('xs'),
  },
  exampleTranslation: {
    fontSize: getResponsiveFontSize('sm'),
    color: colors.neutral[600],
    fontStyle: 'italic',
  },
  practiceCard: {
    backgroundColor: colors.neutral[50],
    borderRadius: 12,
    padding: getResponsiveSpacing('lg'),
    marginBottom: getResponsiveSpacing('md'),
    borderWidth: 1,
    borderColor: colors.neutral[200],
  },
  practiceTitle: {
    fontSize: getResponsiveFontSize('lg'),
    fontWeight: '600',
    color: colors.neutral[900],
    marginBottom: getResponsiveSpacing('sm'),
  },
  practiceDescription: {
    fontSize: getResponsiveFontSize('base'),
    color: colors.neutral[700],
    marginBottom: getResponsiveSpacing('sm'),
  },
  practiceTime: {
    fontSize: getResponsiveFontSize('sm'),
    color: colors.neutral[600],
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: getResponsiveSpacing('xl'),
  },
  errorText: {
    fontSize: getResponsiveFontSize('lg'),
    color: colors.neutral[700],
    marginBottom: getResponsiveSpacing('lg'),
  },
}); 